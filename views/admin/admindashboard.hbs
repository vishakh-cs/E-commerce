<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.16/dist/tailwind.min.css" rel="stylesheet">
    <!--  Moment.js for date manipulation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
     <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
   <style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f7fafc;
    }

    .sidebar {
        background-color: #2d3748;
        color: #ffffff;
        width: 240px;
        height: 100vh;
        position: fixed;
        top: 0;
        left: 0;
        padding-top: 20px;
    }

    .sidebar h1 {
        font-size: 1.5rem;
        text-align: center;
        margin-bottom: 20px;
    }

    .sidebar ul {
        list-style: none;
        padding: 0;
    }

    .sidebar li {
        padding: 10px 20px;
        transition: 0.3s;
    }

    .sidebar li:hover {
        background-color: #4a5568;
    }

    .content {
        margin-left: 240px;
        padding: 20px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th,
    td {
        padding: 16px; /* Increase the height of td elements */
        text-align: left;
    }

    th {
        background-color: #4a5568;
        color: #ffffff;
    }

    tr:nth-child(even) {
        background-color: #edf2f7;
    }

    tr:hover {
        background-color: #cbd5e0;
    }
</style>
</head>

<body class="bg-gray-100 font-sans">
    <!-- Sidebar -->
    <nav class="bg-gray-800 text-white h-screen w-64 fixed top-0 left-0 overflow-y-auto">
        <div class="p-4">
            <h1 class="text-2xl font-semibold">Admin Dashboard</h1>
        </div>
        <ul>
            <!-- Dashboard Link -->
            <li class="px-4 py-2 hover:bg-gray-700">
                <a href="#" class="block">
                    <span class="text-gray-300">Dashboard</span>
                </a>
            </li>
            <!-- User Management Link -->
            <li class="px-4 py-2 hover:bg-gray-700">
                <a href="/user" class="block">
                    <span class="text-gray-300">User Management</span>
                </a>
            </li>
            <!-- Product Management Link -->
            <li class="px-4 py-2 hover:bg-gray-700">
                <a href="productmanagement" class="block">
                    <span class="text-gray-300">Product Management</span>
                </a>
            </li>
            <li class="px-4 py-2 hover:bg-gray-700">
                <a href="/categories" class="block">
                    <span class="text-gray-300">Category Management</span>
                </a>
            </li>
            <!-- Product Add Link -->
            <li class="px-4 py-2 hover:bg-gray-700">
                <a href="/addproducts" class="block">
                    <span class="text-gray-300">Add Product</span>
                </a>
            </li>
            <li class="px-4 py-2 hover:bg-gray-700">
                <a href="/adminOrder" class="block">
                    <span class="text-gray-300">Order Management</span>
                </a>
            </li>
            <li class="px-4 py-2 hover:bg-gray-700">
                <a href="/adminCoupon" class="block">
                    <span class="text-gray-300">Coupon Management</span>
                </a>
            </li>
        </ul>
    </nav>

    <!-- Content Area -->
    <div class="ml-64">
        <!-- Content Header -->
        <header class="bg-white shadow py-4 px-6">
            <div class="flex justify-between items-center">
                <h2 class="text-2xl font-semibold">Dashboard</h2>
            </div>
        </header>

         <!-- Main Content -->
        <main class="p-6">
<div style="text-align: right;">
<button id="downloadPdfButton" class="bg-red-700 hover:bg-red-500 text-white font-semibold py-2 px-4 rounded focus:outline-none">
    Download Sales Report
</button>
<button id="downloadExcel" class="bg-green-700 hover:bg-green-950 text-white font-bold py-2 px-4 rounded">
  Download Excel
</button>

</div>

            <!-- Sales Report -->
            <h2 class="text-xl font-semibold mb-4 text-center" style="text-decoration: underline;"> Sales Report</h2>

            <!-- Chart Canvas -->
            <strong class="underline">Weekly Report</strong>
           <div class="flex">
    <div class="w-1/2">
        <canvas id="weekSalesChart" width="400" height="200"></canvas>
    </div>
    <div class="w-1/2">
        <canvas id="salesPieChart" width="400" height="200"></canvas>
    </div>
</div>

             <strong class="underline">Daily Report</strong>
            <canvas id="salesChart" width="400" height="100"></canvas>
            <table class="min-w-full">
                            <!-- Filter Options -->
            <div class="mb-4">
                <label for="filterBy">Filter by:</label>
                <select id="filterBy" class="ml-2 p-2">
                    <option value="all">All</option>
                    <option value="day">Day</option>
                    <option value="week">Week</option>
                    <option value="month">Month</option>
                </select>
            </div>
                <thead>
                    <tr>
                        <th class="text-left">Order ID</th>
                        <th class="text-left">Email ID</th>
                        <th class="text-left">Products</th>
                        <th class="text-left">Total Amount</th>
                        <th class="text-left">Date</th>
                    </tr>
                </thead>
                <tbody id="salesDataBody">
                                   <tbody>
                    {{#each salesData}}
                 <tr data-sales-data="{{ this.date }}">
                        <td>{{ this.orderId }}</td>
                        <td>{{ this.user }}</td>
                        <td>
                            {{#each this.products}}
                            <div>
                                <p>{{ this.name }}</p>
                                <img src="/uploads/{{ this.image }}" alt="{{ this.name }}" class="w-10 h-12" />
                            </div>
                            {{/each}}
                        </td>

                        <td>Rs. {{ this.totalAmount }}</td>
                        <td>{{ this.date }}</td>
                    </tr>
                    {{/each}}
                </tbody>
                </tbody>
            </table>
        </main>
    </div>
     <script>
        document.getElementById('downloadExcel').addEventListener('click', () => {
            const excelReportURL = '/generateExcelReport';
            fetch(excelReportURL)
                .then(response => response.blob())
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = 'yearly_sales_report.xlsx';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                })
                .catch(error => {
                    console.error('Error downloading Excel report:', error);
                });
        });
    </script>



   <script>
  const downloadPdfButton = document.getElementById('downloadPdfButton');
  downloadPdfButton.addEventListener('click', () => {

    fetch('/salesreportpdf')
      .then((response) => {
        if (response.ok) {
          // Convert the response to a blob
          return response.blob();
        } else {
          // Handle any errors here
          console.error('Error fetching PDF:', response.status, response.statusText);
          alert('Failed to fetch PDF. Please try again later.');
          throw new Error('Failed to fetch PDF');
        }
      })
      .then((blob) => {
        // Create a download link for the PDF
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = 'yearly_sales_report.pdf';

        // Trigger a click event to download the PDF
        document.body.appendChild(a);
        a.click();

        // Cleanup
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      })
      .catch((error) => {
        // Handle any errors from the fetch request
        console.error('Error:', error);
      });
  });
</script>

<script>
async function fetchData() {
  try {
    const response = await fetch('/salesdatapiechart');
    const data = await response.json();

    // Extract data from the JSON response
    const xValues = data.labels; 
    const yValues = data.data;  
    const barColors = [
      "#b91d47", "#00aba9", "#2b5797", "#e8c3b9", "#1e7145",
      "#ff5733", "#fddb2a", "#2763bb", "#ffda77", "#61c0bf",
      "#e15f41", "#6e7f80"  
    ];

    new Chart("salesPieChart", {
      type: "pie",
      data: {
        labels: xValues,
        datasets: [{
          backgroundColor: barColors,
          data: yValues
        }]
      },
      options: {
        title: {
          display: true,
          text: "Monthly Sales Data"
        }
      }
    });
  } catch (error) {
    console.error('Error fetching data:', error);
  }
}

fetchData();
</script>

    
<script>
  document.addEventListener('DOMContentLoaded', async function () {
    const weekSalesChartCanvas = document.getElementById('weekSalesChart').getContext('2d');

    try {
      // Fetch the weekly sales data from  server
      const response = await fetch('/getSalesDataByWeek');
      const salesData = await response.json();
      console.log('Fetched sales data:', salesData);

      // Extract data for chart
      const daysOfTheWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
      const xValues = daysOfTheWeek;
      const yValues = [0, 0, 0, 0, 0, 0, 0]; // Initialize with zeros

// Populate the yValues array  sales data
salesData.forEach((entry) => {
  const day = moment({ year: entry._id.year, month: entry._id.month - 1, day: entry._id.day }).format('ddd');
  const dayIndex = daysOfTheWeek.indexOf(day);
  if (dayIndex !== -1) {
    yValues[dayIndex] = entry.totalAmount;
  }
});


      console.log('xValues:', xValues);
console.log('yValues:', yValues);


      // Random colors for each bar
      const barColors = yValues.map(() => getRandomColor());

      new Chart(weekSalesChartCanvas, {
        type: 'bar',
        data: {
          labels: xValues,
          datasets: [{
            backgroundColor: barColors,
            data: yValues,
          }],
        },
        options: {
          legend: { display: false },
          title: {
            display: true,
            text: 'Weekly Sales Report',
          },
        },
      });
    } catch (error) {
      console.error('Error fetching week sales data:', error);
    }
  });

  // Function to generate random colors for the bar chart
  function getRandomColor() {
    const letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  }
</script>



    {{!-- graph --}}
    <script>
      document.addEventListener('DOMContentLoaded', function () {
  const salesChartCanvas = document.getElementById('salesChart').getContext('2d');

  async function fetchSalesData() {
    try {
      const response = await fetch('/sales-by-day');
      const data = await response.json();
       const labels = data.map((entry) => moment(entry._id).subtract(1, 'month').format('MMM D'));
      const values = data.map((entry) => entry.totalAmount);

      const salesChart = new Chart(salesChartCanvas, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Total Amount',
            data: values,
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 1,
          }],
        },
        options: {
          scales: {
            yAxes: [{
              ticks: {
                beginAtZero: true,
              },
            }],
          },
        },
      });
    } catch (error) {
      console.error('Error fetching sales data:', error);
    }
  }

  fetchSalesData();
});

    </script>

    <script>
    document.addEventListener("DOMContentLoaded", function () {
        const filterBy = document.getElementById("filterBy");
        const salesData = document.querySelectorAll("[data-sales-data]");
        const today = moment();
        const thisWeek = moment().startOf("week");
        const thisMonth = moment().startOf("month");

function filterOrders(filter) {
    const filterDate = filter === "day" ? today : filter === "week" ? thisWeek : filter === "month" ? thisMonth : null;

    salesData.forEach((data) => {
        const dateString = data.dataset.salesData;
        const date = moment(dateString, 'MMM D, YYYY, h:mm A'); 

        if (filter === "all" || (filterDate && date.isSameOrAfter(filterDate, "day"))) {
            data.style.display = "table-row";
        } else {
            data.style.display = "none";
        }
    });
}


        filterBy.addEventListener("change", () => {
            const selectedFilter = filterBy.value;
            filterOrders(selectedFilter);
        });
        filterOrders("all");
    });
</script>

</body>
</html>
