<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>
     <link href="/dist/output.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.15/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10.15.5/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10.15.5/dist/sweetalert2.all.min.js"></script>


    <style>
    @media (max-width: 767px) {
        .navicon {
          width: 1.125em;
          height: .125em;
        }
      
        .navicon::before,
        .navicon::after {
          display: block;
          position: absolute;
          width: 100%;
          height: 100%;
          transition: all .2s ease-out;
          content: '';
          background: #3D4852;
        }
      
        .navicon::before {
          top: 5px;
        }
      
        .navicon::after {
          top: -5px;
        }
      
        .menu-btn:not(:checked) ~ .menu {
          display: none;
        }
      
        .menu-btn:checked ~ .menu {
          display: block;
        }
      
        .menu-btn:checked ~ .menu-icon .navicon {
          background: transparent;
        }
      
        .menu-btn:checked ~ .menu-icon .navicon::before {
          transform: rotate(-45deg);
        }
      
        .menu-btn:checked ~ .menu-icon .navicon::after {
          transform: rotate(45deg);
        }
      
        .menu-btn:checked ~ .menu-icon .navicon::before,
        .menu-btn:checked ~ .menu-icon .navicon::after {
          top: 0;
        }
      }
      </style>


</head>

<body>


<nav class="nav flex flex-wrap items-center justify-between px-8 py-3 bg-red-600 text-white">
    <div class="flex flex-no-shrink items-center mr-6 py-3 text-grey-darkest">

        <span class="font-semibold text-xl tracking-tight"><a href="/"><img class="h-9 w-44" src="/images/Picsart_23-11-05_13-08-46-441.png" alt="ClassicSoul"></span></a>
    </div>

    <input class="menu-btn hidden" type="checkbox" id="menu-btn">
    <label class="menu-icon block cursor-pointer md:hidden px-2 py-4 relative select-none" for="menu-btn">
        <span class="navicon bg-grey-darkest flex items-center relative"></span>
    </label>

    <ul class="menu border-b md:border-none flex justify-end list-reset m-0 w-full md:w-auto">
               <li class="border-t md:border-none mt-4 mr-11 font-bold">
            <a class="hover:text-gray-200" href="/category">Category</a>
        </li>
        <li class="border-t md:border-none mt-4 mr-3 font-bold"> 
            <a href="/wishlist" class="hover:text-gray-200 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
                <span>Wishlist</span>
            </a>
        </li>
        <li class="border-t md:border-none mt-1 flex items-center"> <!-- Use flex container to align items in the same line -->
    <a href="/cart/{{user._id}}" class="flex items-center px-4 py-3 no-underline text-grey-darkest hover:text-grey-darker font-bold">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
        </svg>
        Cart
    </a>
</li>

        <li class="border-t md:border-none mt-4"> <!-- Increased margin-top for the Profile item -->
            <a class="flex items-center hover:text-gray-200" href="/profile">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 hover:text-gray-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span class="ml-2">Profile</span>
            </a>
        </li>
    </ul>
</nav>


<header class="bg-white shadow-md py-8">
    <div class="container mx-auto flex items-center">
        <div class="w-1/4">
            <div class="w-32 h-32 bg-gray-200 rounded-full overflow-hidden mx-auto">
                <img id="profileImage" src="/{{ user.profileImage }}" alt="User Profile Picture" class="w-full h-full object-cover">
            </div>
        </div>
        <div class="w-3/4 ml-8">
            <h1 class="text-3xl font-semibold">{{ user.username }}</h1>
            <p class="text-gray-600">{{ user.email }}</p>
        </div>

        <!-- Wallet Link (Right-aligned) -->
<!-- Wallet Button -->
<button class="text-yellow-50 w-36 bg-orange-400 rounded-2xl h-16 px-3 hover:underline ml-auto mt-4 inline-flex items-center" id="walletButton">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 fill-current mr-2" viewBox="0 0 20 20">
        <path d="M2 3a2 2 0 012-2h14a2 2 0 012 2v16a2 2 0 01-2 2H4a2 2 0 01-2-2V3zm5 12a3 3 0 100-6 3 3 0 000 6z"/>
    </svg>
    <strong> Wallet</strong>
</button>

<!-- Wallet Modal -->
<div class="w-full sm:w-2/5 bg-amber-950 fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white rounded-lg shadow-lg p-4 sm:p-8 z-50 hidden" id="walletModal">
    <div class="mb-4 text-center"></div>
    <h2 class="text-2xl sm:text-3xl font-semibold text-center mb-4">My Wallet</h2>
    <div class="mb-4">
        <div class="w-full sm:w-3/4 mx-auto sm:ml-8">
            <h1 class="text-xl sm:text-3xl font-semibold">{{ user.username }}</h1>
            <p class="text-white">{{ user.email }}</p>
            <p class="text-white">Wallet Amount: ${{ walletAmount }}</p>
        </div>
    </div>

    <!-- Display wallet transactions -->
    <div class="mb-4 wallet-transactions" style="max-height: 200px; overflow-y: auto;">
        <h3 class="text-2xl sm:text-3xl font-semibold mb-2">Wallet Transactions</h3>
        <ul>
            {{#each walletTransactions}}
            <li>
                <p>Type: {{ type }}</p>
                <p>Amount: ${{ amount }}</p>
                <p>Description: {{ description }}</p>
                <p>Date: {{ date }}</p>
            </li>
            {{/each}}
        </ul>
    </div>

    <button class="bg-red-500 text-white py-2 px-4 sm:px-6 rounded-md hover:bg-red-700 w-full" id="closeWalletModal">Close</button>
</div>


</header>


<div class="container mx-auto py-4 ml-10">
    <form action="/profile/upload" method="POST" enctype="multipart/form-data">
        <input type="file" name="profileImage">
        <button type="submit">Upload</button>
    </form>
</div>

<div class="container mx-auto flex justify-between items-center ml-10">
    <a href="/logout"  class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg inline-block">
        Logout
    </a>
</div>



    <div class="container mx-auto p-4">
        <!-- Main Container with Centered Heading -->
        <div class="text-center mb-4">
            <h1 class="text-2xl font-semibold">User Information</h1>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
<!-- User Email Section -->
<div class="bg-white p-4 shadow-md">
    <h2 class="text-xl font-semibold mb-4">User Email</h2>
    <p><strong>Email:</strong> <span class="ml-4" id="userEmail">{{ user.email }}</span></p>
</div>

<div class="bg-white p-4 shadow-md">
    <h2 class="text-xl font-semibold mb-4">Your Referral Code</h2>
    <p><strong>Referral Code:</strong> <span class="ml-4" id="referralCode"><strong>{{ referral.referralCode }}</strong></span></p>
    <p><strong>Enter Referral Code:</strong></p>

    {{#if referral.isRefferalVerified}}
        <p class="text-slate-700 font-serif">You have already entered a referral code.</p>
    {{else}}
        <!-- Referral Code Entry Form -->
        <form action="/profile/updateReferral" method="POST" class="flex flex-col md:flex-row items-center">
            <div class="md:mr-4 mb-4 md:mb-0">
                <input type="text" name="referralCode" id="referralCodeInput" class="w-full md:w-64 py-2 px-3 border rounded-md focus:outline-none focus:border-blue-500" placeholder="Enter your referral code" required>
            </div>
            <button type="submit" class="bg-red-500 text-white py-2 px-4 rounded-md hover:bg-red-700">Submit</button>
        </form>
    {{/if}}
</div>

<!-- Change Password Section -->
<div class="bg-white p-4 shadow-md">
    <h2 class="text-xl font-semibold mb-4">Change Your Password</h2>
    <label for="password" class="text-black" style="float: left;"><strong>Change Your Password</strong></label><br>
    <strong class="bg-red-500 text-white py-3 px-5 rounded-xl mt-4" id="changePasswordLink" style="float: left;">Change Password</strong>
</div>

        </div>
    </div>





<!-- Recent Order Section -->
<div class="recent-orders section w-full bg-white rounded-lg shadow-md p-6 mb-5">
    <h2 class="text-xl font-semibold mb-4">Recent Order</h2>

    <!-- Recent order content goes here -->
    <div class="max-h-72 overflow-y-auto overflow-x-auto">
        <table class="w-full border-collapse border border-gray-300">
            <thead class="bg-gray-100">
                <tr>
                    <th class="border border-gray-300 py-2 px-4">Order ID</th>
                    <th class="border border-gray-300 py-2 px-4">Status</th>
                    <th class="border border-gray-300 py-2 px-4 hidden md:table-cell">Total Price</th>
                    <th class="border border-gray-300 py-2 px-4">Product Image</th>
                    <th class="border border-gray-300 py-2 px-4">Actions</th>
                </tr>
            </thead>
            <tbody>
                {{#each user.recentOrders}}
                    {{#each products}}
                        <tr class="text-center order-row" data-order-id="{{ ../orderId }}">
                            <td class="border border-gray-300 py-2 px-4">{{ ../orderId }}</td>
                            <td class="border border-gray-300 py-2 px-4">{{ ../status }}</td>
                            <td class="border border-gray-300 py-2 px-4 hidden md:table-cell">${{ ../totalPrice }}</td>
                            <td class="border border-gray-300 py-2 px-4">
                                <img src="/uploads/{{ productImage }}" alt="Product Image" class="w-12 h-12 md:w-16 md:h-16 object-cover mx-auto">
                            </td>
                            <td class="border border-gray-300 py-2 px-4">
                                <!-- Cancel Order Button -->
                                <form action="/cancelOrder/{{ ../orderId }}" method="POST">
                                    <button type="button" class="text-red-500 hover:underline" onclick="cancelOrder('{{ ../orderId }}')">Cancel Order</button>
                                </form>
                            </td>
                            <td class="border border-gray-300 py-2 px-4">
                                <form action="/viewOrder/{{ ../orderId }}" method="POST">
                                    <button type="button" class="text-blue-500 hover:underline view-order-button" onclick="viewOrderDetails('{{ ../orderId }}')">View Details</button>
                                </form>
                            </td>
                        </tr>
                    {{/each}}
                {{/each}}
            </tbody>
        </table>
    </div>
</div>



<!-- Address Section -->
<div class="address section w-full bg-white rounded-lg shadow-md p-10">
    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Your Addresses</h2>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        {{#each user.addresses}}
            <div class="bg-gray-100 rounded-lg p-4 hover:shadow-lg transition duration-300">
                <p class="text-lg font-semibold text-gray-800">{{this.tag}} Address:</p>
                <p class="text-gray-600">{{this.address}}</p>
                <p class="text-gray-600">{{this.city}}, {{this.state}}, {{this.pin}}</p>
                <p class="text-gray-600">Phone: {{this.phone}}</p>
                <p class="text-gray-600">Country: {{this.country}}</p>

                <div class="mt-4 flex items-center space-x-4">
                    <input type="radio" id="primary-address-{{this._id}}" name="primary-address" value="{{this._id}}" class="text-blue-500">
                    <label for="primary-address-{{this._id}}" class="text-gray-800 font-semibold">Primary Address</label>
                    <button onclick="setPrimaryAddress('{{this._id}}')" class="ml-2 bg-zinc-400 rounded-xl text-center w-2/6">Set Primary</button>
                </div>

                <div class="mt-4 flex space-x-2">   
                    <form action="/profile/deleteAddress/{{this._id}}" method="post">
                        <button class="text-red-500 hover:underline" type="submit">Delete</button>
                    </form>
                </div>
            </div>
        {{/each}}
    </div>
</div>
<div class="flex justify-center">
<button id="addAddressButton" class="bg-blue-500 text-white py-2 px-4 mt-4 rounded-lg ml-10">Add New Address</button>
</div>
</section>

    <script>
const urlParam = new URLSearchParams(window.location.search);
const SameReferralCode = urlParam.get('cantEnterSameReferralCode');
function displayMessage1() {
    if (SameReferralCode === 'true') {
        Swal.fire({
            title: 'Cant enter Same Referral Code',
            text: 'The referral code you are try to use is Your Referral Code try Other.',
            icon: 'warning',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'OK',
        });
        }
       }
displayMessage1();


    </script>

    <script>
 // Check if the URL contains the query parameter 'alreadyExitedRefferal'
const urlParams = new URLSearchParams(window.location.search);
const alreadyExitedRefferal = urlParams.get('InvalidRefferal');

// Function to display a message based on the query parameter
function displayMessage() {
    if (alreadyExitedRefferal === 'true') {
        // Show a message to the user
        Swal.fire({
            title: 'Invalid Refferal Code',
            text: 'The referral code you are try to use is invalid please try Other.',
            icon: 'warning',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'OK',
        });
    }
}

// Call the function to display the message
displayMessage();

    </script>
    <script>
function viewOrderDetails(orderId) {
    // Navigate to the order details page
    window.location.href = `/viewOrder/${orderId}`;
}
    </script>
    <script>
        const walletButton = document.getElementById("walletButton");
        const walletModal = document.getElementById("walletModal");
        const closeWalletModalButton = document.getElementById("closeWalletModal");

        walletButton.addEventListener("click", () => {
            walletModal.style.display = "block";
        });

        closeWalletModalButton.addEventListener("click", () => {
            walletModal.style.display = "none";
        });
    </script>

    <script>
 
    document.getElementById("changePasswordLink").addEventListener("click", function() {
        window.location.href = "/changepassword";
    });
</script>

     <script>
function cancelOrder(orderId) {
    Swal.fire({
        title: 'Confirm Cancellation',
        text: 'Are you sure you want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it',
        cancelButtonText: 'No, keep it',
    }).then((result) => {
        if (result.isConfirmed) {
            // Send a request to cancel the order here
            fetch(`/cancelOrder/${orderId}`, {
                method: 'POST',
            })
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then((data) => {
                // Handle success, e.g., display a success message
                Swal.fire('Order Cancelled', 'The order has been successfully cancelled.', 'success');
            })
                            // Reload the page
                location.reload();
        }
    });
}
        function setPrimaryAddress(addressId) {
            // Send a POST request to set the address as primary
            fetch(`/api/setPrimaryAddress/${addressId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then((data) => {
                
                console.log(data.message);
            })
            .catch((error) => {
              
                console.error('Error:', error);
            });
        }
        
        var addAddressButton = document.getElementById("addAddressButton");
        addAddressButton.addEventListener("click", function () {
            // Get the number of addresses
            var addressesCount = document.querySelectorAll(".address-item").length;
            
            if (addressesCount >= 2) {
                alert("You already have two or more addresses. You cannot add more.");
            } else {
                // Redirect to the addnewaddress page
                window.location.href = "/addnewaddress";
            }
        });
    </script>
    <script>
  const urlParamsforAddress = new URLSearchParams(window.location.search);
  const maxAddressesReached = urlParamsforAddress.get('maxAddressesReached');

  if (maxAddressesReached === 'true') {
    Swal.fire({
      title: 'Maximum Addresses Reached',
      text: 'You can only have up to 2 addresses.',
      icon: 'error',
      confirmButtonColor: '#d33',
    });
  }
</script>

<script>
    function editEmail() {
    const userEmailElement = document.getElementById("userEmail");
    const currentEmail = userEmailElement.textContent;

    // Create an input field for editing
    const emailInput = document.createElement("input");
    emailInput.type = "email";
    emailInput.value = currentEmail;

    // Replace the email text with the input field
    userEmailElement.innerHTML = "";
    userEmailElement.appendChild(emailInput);

    // Add a "Save" button
    const saveButton = document.createElement("button");
    saveButton.textContent = "Save";
    saveButton.onclick = saveEmail;

    userEmailElement.appendChild(saveButton);
}
function saveEmail() {
    const userEmailElement = document.getElementById("userEmail");
    const newEmail = userEmailElement.querySelector("input").value;

    // Send a request to update the user's email
    fetch("/user/updateEmail", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ newEmail: newEmail }),
    })
        .then((response) => {
            if (!response.ok) {
                throw new Error("Network response was not ok");
            }
            return response.json();
        })
        .then((data) => {
           
            console.log(data.message);

            // Replace the input field with the new email
            userEmailElement.innerHTML = newEmail;
        })
        .catch((error) => {
            
            console.error("Error:", error);
        });
}

</script>

</body>
</html>
